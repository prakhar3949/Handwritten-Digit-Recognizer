# -*- coding: utf-8 -*-
"""app_func.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_pSSHMeq9id1dPbSF5qCMBS4uqGacNZo
"""

from PIL import ImageFont
from PIL import ImageDraw 
from skimage.feature import hog
import numpy as np
import pickle
from PIL import Image as im
from PIL import ImageOps
import cv2
import glob
from sklearn import svm


def predict_letter(image):
    with open('model.pkl', 'rb') as f:
        clf = pickle.load(f)
    
    
    print("Loaded model from disk")
    
    img = cv2.imread('canvas.jpg')
    img = cv2.copyMakeBorder(img,20,20,20,20,cv2.BORDER_CONSTANT,value=[255,255,255])
    imgray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    ret,thresh = cv2.threshold(imgray,60,255,cv2.THRESH_BINARY_INV)
    contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
    
    c = list()
    for i in range(len(hierarchy[0,:,0])):
        if (hierarchy[0,i,3] != -1):
            c.append(i)
    for index in sorted(c, reverse=True):
        del contours[index]       
        
    h_list=[]
    for i in range(len(contours)):
        [x,y,w,h] = cv2.boundingRect(contours[i])
        h_list.append([x,y,w,h]) 
    
    ziped_list=zip(*h_list)
    x_list=list(ziped_list)[0]
    dic=dict(zip(x_list,h_list))
    dic1=dict(zip(x_list,h_list))
    
    x_list = list(x_list)
    x_list.sort()
    j=0
    for x in x_list:
        [x,y,w,h]=dic[x]
        im3=img[y:y+h,x:x+w]
        cv2.imwrite('pix'+str(j)+'.png',im3)
        j+=1
    
    onlyfiles = glob.glob("pix*.png")
    test_features = []
    
    for st in onlyfiles:

        image = im.open(st).convert("L")
        
        image = image.resize((28,28))
        invert_im = ImageOps.invert(image)

       	image =np.array(invert_im)

        test_features.append(image)
   

    def calc_hog_features(X, image_shape=(28, 28), pixels_per_cell=(8, 8)):
    	fd_list = []
    	for row in X:
        	
        	fd = hog(row, orientations=8, pixels_per_cell=pixels_per_cell, cells_per_block=(1, 1))
        	fd_list.append(fd)
    
    	return np.array(fd_list)
    
    X_test = calc_hog_features(test_features, pixels_per_cell=(8, 8))
    X_test = np.array(X_test, 'float64')
    	

    test_l = clf.predict(X_test)
    print(test_l)
    
    
    
    test_n=test_l.astype(str)
    test_n=["'" + item + "'" for item in test_n]
    
   
    
    img1 = im.open("canvas.jpg")
    draw = ImageDraw.Draw(img1)
    font = ImageFont.load_default()
    for k,x in enumerate(x_list):
        dic1[x][1]=dic1[x][1]-(dic1[x][3]/2)
        loc = tuple(dic1[x][0:2])
        text=test_n[k]
        draw.text(loc,text,(255,16,16),font=font)
    img2 = np.array(img1)
    cv2.imshow("img",img2)
    x_f1=list(map(float, x_list))
    